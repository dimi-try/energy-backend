# Импортируем BaseModel из Pydantic для создания схем
from pydantic import BaseModel, Field
# Импортируем Optional и List для аннотации необязательных полей и списков
from typing import Optional, List

# =============== БРЕНДЫ ===============
# Определяем раздел для моделей, связанных с брендами энергетиков

# Базовая модель для брендов, содержит общие поля
class BrandBase(BaseModel):
    # Поле name: название бренда, обязательное, с максимальной длиной 255 символов
    # Используется Field для валидации длины и указания, что поле обязательно (...)
    name: str = Field(..., max_length=255)

# Модель для создания бренда, наследуется от BrandBase
class BrandCreate(BrandBase):
    # Наследуем все поля из BrandBase без изменений, используется для POST-запросов
    pass

# Полная модель бренда, используется для возврата данных о бренде
class Brand(BrandBase):
    # Поле id: уникальный идентификатор бренда, возвращается в ответах API
    id: int
    # Поле average_rating: средний рейтинг бренда, необязательное, по умолчанию None
    average_rating: Optional[float] = None
    # Поле energy_count: количество энергетиков бренда, необязательное, по умолчанию None
    energy_count: Optional[int] = None
    # Поле review_count: количество отзывов на энергетики бренда, необязательное
    review_count: Optional[int] = None
    # Поле rating_count: количество оценок на энергетики бренда, необязательное
    rating_count: Optional[int] = None
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для Brand:
Эта модель используется в эндпоинте GET /brand/{brand_id}, который возвращает информацию о конкретном бренде.
- Поле id необходимо для идентификации бренда в базе данных.
- Поля average_rating, energy_count, review_count и rating_count вычисляются в crud.py и добавляются к объекту.
- Эндпоинт доступен всем пользователям (гостям, зарегистрированным пользователям и администраторам),
  так как это публичная информация о бренде.
"""

# Модель для бренда без статистики, используется в списке энергетиков бренда
class BrandAndEnergies(BrandBase):
    # Поле id: уникальный идентификатор бренда
    id: int
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для BrandAndEnergies:
Эта модель создана специально для эндпоинта GET /brands/{brand_id}/energies/,
который возвращает список энергетиков определенного бренда. Статистика (average_rating и т.д.)
здесь не нужна, чтобы уменьшить объем данных в ответе. Эндпоинт доступен всем пользователям.
"""