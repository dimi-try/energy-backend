# Импортируем BaseModel из Pydantic для создания схем
from pydantic import BaseModel, Field
# Импортируем Optional и List для аннотации
from typing import Optional, List

# =============== КАТЕГОРИИ ===============
# Определяем раздел для моделей, связанных с категориями энергетиков

# Базовая модель для категорий, содержит общие поля
class CategoryBase(BaseModel):
    # Поле name: название категории, обязательное, с максимальной длиной 100 символов
    name: str = Field(..., max_length=100)

# Модель для создания категории, наследуется от CategoryBase
class CategoryCreate(CategoryBase):
    # Наследуем все поля из CategoryBase без изменений, используется для POST-запросов
    pass

# Полная модель категории, используется для возврата данных о категории
class Category(CategoryBase):
    # Поле id: уникальный идентификатор категории
    id: int
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для Category:
Эта модель используется в эндпоинте GET /categories/, который возвращает список всех категорий.
Эндпоинт доступен всем пользователям, так как категории — это публичная информация.
"""