import os
import csv
import random #–¥–ª—è —Ä–∞–Ω–¥–æ–º–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤
import string  #–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
import time
from datetime import datetime, timezone
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from alembic.config import Config
from alembic import command
from decimal import Decimal, ROUND_HALF_UP #–¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è

from app.db.models import *  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π SQLAlchemy
from app.core.config import DATABASE_URL

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(bind=engine)
alembic_cfg = Config("alembic.ini")

def random_description(length=10):  
    """–†–∞–Ω–¥–æ–º–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"""
    words = ["".join(random.choices(string.ascii_lowercase, k=random.randint(3, 10))) for _ in range(length)]  
    return " ".join(words).capitalize() + "."  

def generate_rating_value() -> float:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10 —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    random_value = random.uniform(0, 10)
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    rounded_value = Decimal(random_value).quantize(Decimal('0.0000'), rounding=ROUND_HALF_UP)
    return float(rounded_value)

def reset_database():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with engine.begin() as conn:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
            conn.execute(text("DROP SCHEMA IF EXISTS public CASCADE"))
            conn.execute(text("CREATE SCHEMA public"))
            conn.execute(text("GRANT ALL ON SCHEMA public TO postgres"))
            conn.execute(text("GRANT ALL ON SCHEMA public TO public"))
        print("üî• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
        raise

def clean_and_apply_migrations():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        alembic_versions_dir = "alembic/versions"
        if os.path.exists(alembic_versions_dir):
            for f in os.listdir(alembic_versions_dir):
                file_path = os.path.join(alembic_versions_dir, f)
                if os.path.isfile(file_path):
                    os.remove(file_path)
        print("üßπ –°—Ç–∞—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã")

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        command.revision(alembic_cfg, autogenerate=True, message="Initial")
        print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
        command.upgrade(alembic_cfg, "head")
        print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏: {e}")
        raise

def seed_data():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    db = SessionLocal()
    
    try:
        # 3.0 –†–æ–ª–∏
        roles = [
            Role(name="admin"),
            Role(name="user")
        ]
        db.add_all(roles)
        db.commit()

        # 3.1 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        users = [
            User(
                username="test_user_1",
                is_premium=False,
                created_at=int(time.time())  # Unix timestamp –≤ UTC
            )
        ]
        db.add_all(users)
        db.commit()

        # 3.2 –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            Category(name="–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫"),
            Category(name="–û–±—ã—á–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫"),
            Category(name="–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞"),
            Category(name="–ß–∞–π/–í–∏—Ç–∞–º–∏–Ω—ã")
        ]
        db.add_all(categories)
        db.commit()

        # 3.3 –ö—Ä–∏—Ç–µ—Ä–∏–∏
        criteria = [
            Criteria(name="–í–∫—É—Å"),
            Criteria(name="–°—Ç–æ–∏–º–æ—Å—Ç—å"),
            Criteria(name="–°–æ—Å—Ç–∞–≤")
        ]
        db.add_all(criteria)
        db.commit()

        # 3.4 –ë—Ä–µ–Ω–¥—ã –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏
        brands = {}
        with open("test_data.csv", "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                # –°–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                brand_name = row["model"].strip()
                if brand_name not in brands:
                    brand = Brand(name=brand_name)
                    db.add(brand)
                    db.commit()
                    db.refresh(brand)
                    brands[brand_name] = brand.id

                # –°–æ–∑–¥–∞–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫
                energy = Energy(
                    name=row["name"].strip(),
                    brand_id=brands[brand_name],
                    category_id=2,  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    description="", # –°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
                    image_url="", # –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    ingredients="", # –°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                )
                db.add(energy)
                db.commit()

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ CSV –≤ Unix timestamp
                date_obj = datetime.strptime(row["date"], "%Y-%m-%d").replace(tzinfo=timezone.utc)
                timestamp = int(date_obj.timestamp())  # UTC timestamp

                # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤—ã
                reviews = [
                    Review(  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_id=users[0].id,
                        energy_id=energy.id,
                        review_text=row["description"],
                        created_at=timestamp  # Unix timestamp
                    )
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Ä–∞–∑–æ–º
                db.add_all(reviews)
                db.commit()

                # –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –¢–û–õ–¨–ö–û –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
                ratings = []
                for review in reviews:  # –¶–∏–∫–ª —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –æ—Ç–∑—ã–≤–∞–º
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if review.user_id == users[0].id:
                        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
                        rating_values = [float(row["rating"])] * 3
                    else:
                        # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        rating_values = [generate_rating_value() for _ in range(3)]
                    
                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∫ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                    for criteria_id, rating_value in zip([c.id for c in criteria], rating_values):
                        ratings.append(
                            Rating(
                                review_id=review.id,
                                criteria_id=criteria_id,
                                rating_value=rating_value
                            )
                        )

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
                db.add_all(ratings)
                db.commit()

        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise
    finally:
        db.close()

if __name__ == "__main__":
    reset_database()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    clean_and_apply_migrations()  # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ
    seed_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
