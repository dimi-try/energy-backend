# Импортируем базовый класс BaseModel из Pydantic для создания моделей данных
from pydantic import BaseModel, Field, condecimal
# Импортируем типы Optional и List из typing для аннотации необязательных полей и списков
from typing import Optional, List
# Импортируем datetime для работы с датой и временем в моделях
from datetime import datetime

# =============== БРЕНДЫ ===============
# Определяем раздел для моделей, связанных с брендами энергетиков

# Базовая модель для брендов, содержит общие поля
class BrandBase(BaseModel):
    # Поле name: название бренда, обязательное, с максимальной длиной 255 символов
    # Используется Field для валидации длины и указания, что поле обязательно (...)
    name: str = Field(..., max_length=255)

# Модель для создания бренда, наследуется от BrandBase
class BrandCreate(BrandBase):
    # Наследуем все поля из BrandBase без изменений, используется для POST-запросов
    pass

# Полная модель бренда, используется для возврата данных о бренде
class Brand(BrandBase):
    # Поле id: уникальный идентификатор бренда, возвращается в ответах API
    id: int
    # Поле average_rating: средний рейтинг бренда, необязательное, по умолчанию None
    average_rating: Optional[float] = None
    # Поле energy_count: количество энергетиков бренда, необязательное, по умолчанию None
    energy_count: Optional[int] = None
    # Поле review_count: количество отзывов на энергетики бренда, необязательное
    review_count: Optional[int] = None
    # Поле rating_count: количество оценок на энергетики бренда, необязательное
    rating_count: Optional[int] = None
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для Brand:
Эта модель используется в эндпоинте GET /brand/{brand_id}, который возвращает информацию о конкретном бренде.
- Поле id необходимо для идентификации бренда в базе данных.
- Поля average_rating, energy_count, review_count и rating_count вычисляются в crud.py и добавляются к объекту.
- Эндпоинт доступен всем пользователям (гостям, зарегистрированным пользователям и администраторам),
  так как это публичная информация о бренде.
"""

# Модель для бренда без статистики, используется в списке энергетиков бренда
class BrandAndEnergies(BrandBase):
    # Поле id: уникальный идентификатор бренда
    id: int
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для BrandAndEnergies:
Эта модель создана специально для эндпоинта GET /brands/{brand_id}/energies/,
который возвращает список энергетиков определенного бренда. Статистика (average_rating и т.д.)
здесь не нужна, чтобы уменьшить объем данных в ответе. Эндпоинт доступен всем пользователям.
"""

# =============== КАТЕГОРИИ ===============
# Определяем раздел для моделей, связанных с категориями энергетиков

# Базовая модель для категорий, содержит общие поля
class CategoryBase(BaseModel):
    # Поле name: название категории, обязательное, с максимальной длиной 100 символов
    name: str = Field(..., max_length=100)

# Модель для создания категории, наследуется от CategoryBase
class CategoryCreate(CategoryBase):
    # Наследуем все поля из CategoryBase без изменений, используется для POST-запросов
    pass

# Полная модель категории, используется для возврата данных о категории
class Category(CategoryBase):
    # Поле id: уникальный идентификатор категории
    id: int
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для Category:
Эта модель используется в эндпоинте GET /categories/, который возвращает список всех категорий.
Эндпоинт доступен всем пользователям, так как категории — это публичная информация.
"""

# =============== ЭНЕРГЕТИКИ ===============
# Определяем раздел для моделей, связанных с энергетиками

# Базовая модель для энергетиков, содержит общие поля
class EnergyBase(BaseModel):
    # Поле name: название энергетика, обязательное, с максимальной длиной 255 символов
    name: str = Field(..., max_length=255)
    # Поле brand_id: идентификатор бренда, к которому относится энергетик, обязательное
    brand_id: int
    # Поле category_id: идентификатор категории, необязательное, по умолчанию None
    category_id: Optional[int] = None
    # Поле description: описание энергетика, необязательное, строка
    description: Optional[str] = None
    # Поле ingredients: ингредиенты энергетика, необязательное, строка
    ingredients: Optional[str] = None
    # Поле image_url: URL изображения энергетика, необязательное
    image_url: Optional[str] = None
    # Поле energy_type: тип энергетика, по умолчанию "regular", с описанием возможных значений
    energy_type: str = Field("regular", description="Type: alcoholic, regular, sugar_free")
    # Поле average_rating: средний рейтинг энергетика, необязательное
    average_rating: Optional[float] = None
    # Поле review_count: количество отзывов на энергетик, необязательное
    review_count: Optional[int] = None

# Модель для создания энергетика, наследуется от EnergyBase
class EnergyCreate(EnergyBase):
    # Наследуем все поля из EnergyBase без изменений, используется для POST-запросов
    pass

# Полная модель энергетика, используется для возврата данных об энергетике
class Energy(EnergyBase):
    # Поле id: уникальный идентификатор энергетика
    id: int
    # Поле brand: объект бренда, к которому относится энергетик
    brand: Brand
    # Поле category: объект категории, необязательное, может быть None
    category: Optional[Category]
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для Energy:
Эта модель используется в эндпоинтах GET /energies/ и GET /energy/{energy_id}.
- GET /energies/ возвращает список всех энергетиков, доступен всем пользователям.
- GET /energy/{energy_id} возвращает данные о конкретном энергетике, также доступен всем.
"""

# Модель для энергетиков бренда, без статистики бренда
class EnergiesByBrand(EnergyBase):
    # Поле id: уникальный идентификатор энергетика
    id: int
    # Поле brand: объект бренда без статистики, используется в списке энергетиков бренда
    brand: BrandAndEnergies
    # Поле category: объект категории, необязательное
    category: Optional[Category]
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для EnergiesByBrand:
Эта модель используется в эндпоинте GET /brands/{brand_id}/energies/, который возвращает
список энергетиков конкретного бренда. Доступен всем пользователям.
"""

# =============== ПОЛЬЗОВАТЕЛИ ===============
# Определяем раздел для моделей, связанных с пользователями

# Базовая модель для пользователей, содержит общие поля
class UserBase(BaseModel):
    # Поле username: имя пользователя, обязательное, с максимальной длиной 100 символов
    username: str = Field(..., max_length=100)
    # Поле email: email пользователя, обязательное, с максимальной длиной 255 символов
    email: str = Field(..., max_length=255)

# Модель для создания пользователя, наследуется от UserBase
class UserCreate(UserBase):
    # Поле password: пароль пользователя, обязательное, длина от 8 до 255 символов
    password: str = Field(..., min_length=8, max_length=255)

# Полная модель пользователя, используется для возврата данных о пользователе
class User(UserBase):
    # Поле id: уникальный идентификатор пользователя
    id: int
    # Поле is_premium: флаг, указывающий, является ли пользователь премиум-пользователем
    is_premium: bool
    # Поле created_at: дата и время создания пользователя
    created_at: datetime
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для User:
Эта модель используется в эндпоинте GET /users/{user_id}, который возвращает данные
о конкретном пользователе. Эндпоинт доступен только администраторам или самому пользователю.
"""

# =============== КРИТЕРИИ ===============
# Определяем раздел для моделей, связанных с критериями оценок

# Базовая модель для критериев, содержит общие поля
class CriteriaBase(BaseModel):
    # Поле name: название критерия, обязательное, с максимальной длиной 100 символов
    name: str = Field(..., max_length=100)

# Модель для создания критерия, наследуется от CriteriaBase
class CriteriaCreate(CriteriaBase):
    # Наследуем все поля из CriteriaBase без изменений, используется для POST-запросов
    pass

# Полная модель критерия, используется для возврата данных о критерии
class Criteria(CriteriaBase):
    # Поле id: уникальный идентификатор критерия
    id: int
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для Criteria:
Эта модель используется в эндпоинте GET /criteria/, который возвращает список всех критериев.
Эндпоинт доступен всем пользователям, так как критерии — это публичная информация.
"""

# =============== ОТЗЫВЫ И ОЦЕНКИ ===============
# Определяем раздел для моделей, связанных с отзывами и оценками

# Базовая модель для оценок, содержит общие поля
class RatingBase(BaseModel):
    # Поле criteria_id: идентификатор критерия, по которому ставится оценка
    criteria_id: int
    # Поле rating_value: значение оценки, от 0 до 10 с 4 знаками после запятой
    rating_value: condecimal(ge=0, le=10, decimal_places=4)

# Базовая модель для отзывов, содержит общие поля
class ReviewBase(BaseModel):
    # Поле energy_id: идентификатор энергетика, к которому относится отзыв
    energy_id: int
    # Поле user_id: идентификатор пользователя, оставившего отзыв
    user_id: int
    # Информация о пользователе (его имя)
    user: UserBase
    # Поле review_text: текст отзыва, обязательное
    review_text: str

# Модель для создания отзыва, наследуется от ReviewBase
class ReviewCreate(ReviewBase):
    # Поле ratings: список оценок по критериям, связанных с отзывом
    ratings: List[RatingBase]

# Полная модель отзыва, используется для возврата данных об отзыве
class Review(ReviewBase):
    # Поле id: уникальный идентификатор отзыва
    id: int
    # Поле created_at: дата и время создания отзыва
    created_at: datetime
    # Поле ratings: список объектов оценок, связанных с отзывом
    ratings: List["Rating"]
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

# Полная модель оценки, используется для возврата данных об оценке
class Rating(RatingBase):
    # Поле id: уникальный идентификатор оценки
    id: int
    # Поле review_id: идентификатор отзыва, к которому относится оценка
    review_id: int
    # Поле created_at: дата и время создания оценки
    created_at: datetime
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для Review и Rating:
- Review используется в эндпоинтах POST /review/ (доступен зарегистрированным пользователям)
  и GET /energy/{energy_id}/reviews/ (доступен всем пользователям).
- Rating используется внутри Review для представления оценок по критериям.
"""

# =============== ПРОФИЛЬ ===============
# Определяем раздел для модели профиля пользователя

# Модель профиля пользователя, содержит статистику и данные пользователя
class UserProfile(BaseModel):
    # Поле user: объект пользователя
    user: User
    # Поле total_ratings: общее количество оценок пользователя
    total_ratings: int
    # Поле average_rating: средний рейтинг пользователя, от 0 до 10, необязательное
    average_rating: Optional[condecimal(ge=0, le=10, decimal_places=4)] = None
    # Поле favorite_brand: любимый бренд пользователя, необязательное
    favorite_brand: Optional[Brand] = None
    # Поле favorite_energy: любимый энергетик пользователя, необязательное
    favorite_energy: Optional[Energy] = None
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для UserProfile:
Эта модель используется в эндпоинте GET /users/{user_id}/profile, который возвращает
профиль пользователя. Доступен только самому пользователю или администраторам.
"""

# =============== ТОПЫ ===============
# Определяем раздел для моделей топов (энергетиков и брендов)

# Модель для топа энергетиков
class EnergyTop(BaseModel):
    # Поле id: уникальный идентификатор энергетика
    id: int
    # Поле name: название энергетика
    name: str
    # Поле average_rating: средний рейтинг энергетика, от 0 до 10 с 4 знаками после запятой
    average_rating: condecimal(ge=0, le=10, decimal_places=4)
    # Поле brand: объект бренда энергетика
    brand: Brand
    # Поле category: объект категории, необязательное
    category: Optional[Category] = None
    # Поле review_count: общее количество отзывов на энергетик
    review_count: int
    # Внутренний класс Config для настройки модели
    class Config:
        # Указываем, что модель может быть создана из атрибутов ORM-объектов SQLAlchemy
        from_attributes = True

"""
Сноска для EnergyTop:
Эта модель используется в эндпоинте GET /top/energies/, который возвращает топ энергетиков.
Эндпоинт доступен всем пользователям.
"""

# Модель для топа брендов
class BrandTop(BaseModel):
    # Поле id: уникальный идентификатор бренда
    id: int
    # Поле name: название бренда
    name: str
    # Поле average_rating: средний рейтинг бренда, от 0 до 10 с 4 знаками после запятой
    average_rating: condecimal(ge=0, le=10, decimal_places=4)
    # Поле energy_count: количество энергетиков бренда, необязательное
    energy_count: Optional[int] = None
    # Поле review_count: количество отзывов на энергетики бренда, необязательное
    review_count: Optional[int] = None
    # Поле rating_count: количество оценок на энергетики бренда, необязательное
    rating_count: Optional[int] = None

"""
Сноска для BrandTop:
Эта модель используется в эндпоинте GET /top/brands/, который возвращает топ брендов.
Эндпоинт доступен всем пользователям.
"""